#!/bin/bash

# Signing Configuration Helper Functions
# Used by setup-signing.sh and build.sh

# Encode a string to base64 (for obfuscation, not encryption)
encode_value() {
    # Use platform-appropriate base64 flags
    # macOS doesn't support -w flag, Linux needs it to prevent line wrapping
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo -n "$1" | base64
    else
        echo -n "$1" | base64 -w 0
    fi
}

# Decode a base64 string
decode_value() {
    echo -n "$1" | base64 -d
}

# Load signing configuration from .signing-config file
load_signing_config() {
    local config_file="$1"

    if [ ! -f "$config_file" ]; then
        return 1
    fi

    # Source the config file to get encoded values
    source "$config_file"

    # Decode and export as environment variables
    if [ -n "$KEYSTORE_PATH_ENC" ]; then
        export KEYSTORE_PATH=$(decode_value "$KEYSTORE_PATH_ENC")
    fi

    if [ -n "$KEYSTORE_PASSWORD_ENC" ]; then
        export KEYSTORE_PASSWORD=$(decode_value "$KEYSTORE_PASSWORD_ENC")
    fi

    if [ -n "$KEY_ALIAS_ENC" ]; then
        export KEY_ALIAS=$(decode_value "$KEY_ALIAS_ENC")
    fi

    if [ -n "$KEY_PASSWORD_ENC" ]; then
        export KEY_PASSWORD=$(decode_value "$KEY_PASSWORD_ENC")
    fi

    return 0
}

# Save signing configuration to .signing-config file
save_signing_config() {
    local config_file="$1"
    local keystore_path="$2"
    local keystore_password="$3"
    local key_alias="$4"
    local key_password="$5"

    # Create config file with encoded values
    cat > "$config_file" <<EOF
# Android Signing Configuration
# This file is auto-generated by setup-signing.sh
# DO NOT COMMIT THIS FILE TO VERSION CONTROL
# DO NOT SHARE THIS FILE
#
# Values are base64 encoded to prevent accidental exposure
# To reconfigure, run: ./expo-build-tools/setup-signing.sh

KEYSTORE_PATH_ENC="$(encode_value "$keystore_path")"
KEYSTORE_PASSWORD_ENC="$(encode_value "$keystore_password")"
KEY_ALIAS_ENC="$(encode_value "$key_alias")"
KEY_PASSWORD_ENC="$(encode_value "$key_password")"
EOF

    # Set restrictive permissions
    chmod 600 "$config_file"

    return 0
}

# Validate keystore file and credentials
validate_keystore() {
    local keystore_path="$1"
    local keystore_password="$2"
    local key_alias="$3"

    # Check if keystore file exists
    if [ ! -f "$keystore_path" ]; then
        echo "ERROR: Keystore file not found: $keystore_path"
        return 1
    fi

    # Check if keystore is readable
    if [ ! -r "$keystore_path" ]; then
        echo "ERROR: Keystore file not readable: $keystore_path"
        return 1
    fi

    # Test keystore with keytool (validates password and alias)
    if ! keytool -list -keystore "$keystore_path" -alias "$key_alias" -storepass "$keystore_password" >/dev/null 2>&1; then
        echo "ERROR: Failed to validate keystore credentials"
        echo "  Possible issues:"
        echo "  - Incorrect keystore password"
        echo "  - Incorrect key alias"
        echo "  - Corrupted keystore file"
        return 1
    fi

    return 0
}

# Inject signing configuration into android/app/build.gradle
# This function modifies the gradle file to add release signing configuration
# Args: gradle_file, keystore_path, keystore_password, key_alias, key_password
inject_gradle_signing_config() {
    local gradle_file="$1"
    local keystore_path="$2"
    local keystore_password="$3"
    local key_alias="$4"
    local key_password="$5"

    if [ ! -f "$gradle_file" ]; then
        echo "ERROR: build.gradle not found: $gradle_file"
        return 1
    fi

    # Check if signing config already exists (idempotent operation)
    if grep -q "// AUTO-INJECTED SIGNING CONFIG" "$gradle_file"; then
        # Already injected, skip
        return 0
    fi

    # Create signing config block that will be injected after "android {" line
    # Uses environment variables only - no hardcoded credentials written to disk
    # Environment variables are exported by build.sh before running gradle
    local signing_block="    // AUTO-INJECTED SIGNING CONFIG - DO NOT EDIT MANUALLY
    // This is regenerated after expo prebuild by expo-build-tools
    // To update: run ./expo-build-tools/setup-signing.sh
    // IMPORTANT: Requires environment variables to be set (build.sh does this automatically)

    signingConfigs {
        release {
            // Read signing credentials from environment variables
            // These are exported by build.sh from .signing-config
            storeFile file(System.getenv(\"KEYSTORE_PATH\"))
            storePassword System.getenv(\"KEYSTORE_PASSWORD\")
            keyAlias System.getenv(\"KEY_ALIAS\")
            keyPassword System.getenv(\"KEY_PASSWORD\")
        }
    }
"

    # Use awk to inject the signing config after "android {"
    awk -v config="$signing_block" '
        /^[[:space:]]*android[[:space:]]*\{/ {
            print
            print config
            next
        }
        { print }
    ' "$gradle_file" > "$gradle_file.tmp"

    mv "$gradle_file.tmp" "$gradle_file"

    # Ensure buildTypes.release uses the correct signing config
    # Expo defaults to signingConfigs.debug for release builds, we need to change it
    # Platform-compatible sed -i (macOS requires empty string after -i, Linux doesn't)
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' 's/signingConfig signingConfigs\.debug/signingConfig signingConfigs.release/g' "$gradle_file"
    else
        sed -i 's/signingConfig signingConfigs\.debug/signingConfig signingConfigs.release/g' "$gradle_file"
    fi

    # If no signingConfig line exists in release block at all, add it
    if ! grep -A 20 "buildTypes" "$gradle_file" | grep -A 15 "release {" | grep -q "signingConfig"; then
        # Add signingConfig line right after "release {" line
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' '/release[[:space:]]*{/ a\
            signingConfig signingConfigs.release' "$gradle_file"
        else
            sed -i '/release[[:space:]]*{/ a\            signingConfig signingConfigs.release' "$gradle_file"
        fi
    fi

    return 0
}

# Ensure .signing-config is in .gitignore
ensure_gitignore() {
    local project_root="$1"
    local gitignore_file="$project_root/.gitignore"

    # Create .gitignore if it doesn't exist
    if [ ! -f "$gitignore_file" ]; then
        touch "$gitignore_file"
    fi

    # Check if .signing-config is already in .gitignore
    if ! grep -q "^\.signing-config$" "$gitignore_file"; then
        echo "" >> "$gitignore_file"
        echo "# Android signing configuration (expo-build-tools)" >> "$gitignore_file"
        echo ".signing-config" >> "$gitignore_file"
    fi
}
