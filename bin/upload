#!/bin/bash

set -e  # Exit on any error

# Enable debug mode if DEBUG=1
if [ "${DEBUG:-0}" = "1" ]; then
    set -x
fi

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source configuration
source "$SCRIPT_DIR/../lib/config.sh"

echo -e "${BLUE}╔═══════════════════════════════════════╗${NC}"
echo -e "${BLUE}║  Expo Upload Script (rclone)         ║${NC}"
echo -e "${BLUE}╚═══════════════════════════════════════╝${NC}\n"

# Function to check if rclone is installed
check_rclone() {
    if ! command -v rclone &> /dev/null; then
        echo -e "${RED}ERROR: rclone not installed${NC}"
        echo -e "${YELLOW}rclone is required for uploading files to Google Drive.${NC}\n"
        echo -e "${BLUE}Installation:${NC}"

        # Use PLATFORM from already sourced config.sh
        case "${PLATFORM:-linux}" in
            macos)
                echo -e "  brew install rclone"
                ;;
            windows)
                echo -e "  choco install rclone"
                echo -e "  or download from: https://rclone.org/downloads/"
                ;;
            *)
                echo -e "  sudo apt install rclone      # Debian/Ubuntu"
                echo -e "  sudo yum install rclone      # RHEL/CentOS"
                echo -e "  or download from: https://rclone.org/downloads/"
                ;;
        esac

        echo -e "\nAfter installation, configure with:"
        echo -e "  rclone config\n"
        echo -e "Documentation: https://rclone.org/drive/\n"
        exit 1
    fi
}

# Function to verify remote exists
check_remote() {
    local remote_name="${GDRIVE_REMOTE%:}"  # Remove trailing colon
    if ! rclone listremotes | grep -q "^${remote_name}:$"; then
        echo -e "${RED}ERROR: rclone remote not configured${NC}"
        echo -e "${YELLOW}Remote '${GDRIVE_REMOTE}' not found in rclone configuration.${NC}\n"
        echo -e "${BLUE}Available remotes:${NC}"
        rclone listremotes | sed 's/^/  /' || echo -e "  (none configured)"
        echo ""
        echo -e "${BLUE}To configure Google Drive remote:${NC}"
        echo -e "  1. Run: rclone config"
        echo -e "  2. Choose: n (New remote)"
        echo -e "  3. Name it: ${remote_name}"
        echo -e "  4. Choose storage type: drive (Google Drive)"
        echo -e "  5. Follow the prompts to authenticate\n"
        echo -e "Or update GDRIVE_REMOTE in config.sh to match an existing remote\n"
        echo -e "Documentation: https://rclone.org/drive/\n"
        exit 1
    fi
}

# Function to upload a file
upload_file() {
    local file_path=$1
    local dest_folder=$2
    local file_name=$(basename "$file_path")

    [ ! -f "$file_path" ] && { echo -e "${RED}ERROR: File not found: $file_path${NC}"; return 1; }

    echo -e "${BLUE}Uploading: $file_name${NC}"

    local destination="${GDRIVE_REMOTE}${dest_folder}"

    # Let rclone handle everything - retries, rate limits, errors
    rclone copy "$file_path" "$destination" \
        --progress \
        --drive-chunk-size 32M \
        --transfers 1 \
        --retries 5 \
        --low-level-retries 20 \
        --timeout 10m \
        --contimeout 60s \
        --no-traverse \
        --no-check-dest \
        --ignore-checksum \
        --drive-acknowledge-abuse \
        --drive-stop-on-upload-limit \
        --stats 10s \
        --stats-one-line

    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}Uploaded: $file_name${NC}\n"
        return 0
    else
        echo -e "${RED}ERROR: Upload failed (exit code: $exit_code)${NC}\n"
        return 1
    fi
}

# Check dependencies
check_rclone
check_remote

# Parse arguments
if [ $# -eq 0 ]; then
    echo -e "${RED}Error: No files specified${NC}"
    echo -e "${YELLOW}Usage: ./expo-gdrive-sync/exb upload <files> [folder]${NC}"
    echo ""
    echo "Examples:"
    echo "  ./expo-gdrive-sync/exb upload ./builds/*.apk"
    echo "  ./expo-gdrive-sync/exb upload ./builds/* MyApp/Builds"
    echo ""
    echo "Default folder: Builds"
    exit 1
fi

# Track success/failure
SUCCESS_COUNT=0
FAILURE_COUNT=0

# Collect all arguments
DEST_FOLDER="$DEFAULT_UPLOAD_FOLDER"
FILES=()

for arg in "$@"; do
    # Check if argument looks like a folder path (doesn't exist as file)
    if [ ! -f "$arg" ] && [ ! -L "$arg" ]; then
        # Check if it's the last argument and doesn't contain wildcards
        if [ "$arg" = "${@: -1}" ] && [[ ! "$arg" =~ \* ]]; then
            DEST_FOLDER="$arg"
            continue
        fi
    fi

    # Expand wildcards and add files
    for file in $arg; do
        if [ -f "$file" ]; then
            FILES+=("$file")
        fi
    done
done

# Check if we have files to upload
if [ ${#FILES[@]} -eq 0 ]; then
    echo -e "${RED}Error: No valid files found${NC}"
    exit 1
fi

echo -e "${BLUE}Found ${#FILES[@]} file(s) to upload${NC}"
echo -e "${BLUE}Destination: ${GDRIVE_REMOTE}${DEST_FOLDER}${NC}\n"

# Upload each file
for file in "${FILES[@]}"; do
    if upload_file "$file" "$DEST_FOLDER"; then
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
    else
        FAILURE_COUNT=$((FAILURE_COUNT + 1))
    fi
done

# Summary
echo -e "${BLUE}╔═══════════════════════════════════════╗${NC}"
echo -e "${BLUE}║  Upload Summary                       ║${NC}"
echo -e "${BLUE}╚═══════════════════════════════════════╝${NC}"
echo -e "${GREEN}Successful: $SUCCESS_COUNT${NC}"
echo -e "${RED}Failed: $FAILURE_COUNT${NC}"

if [ $FAILURE_COUNT -eq 0 ]; then
    echo -e "\n${GREEN}All files uploaded successfully${NC}"
    exit 0
else
    echo -e "\n${YELLOW}Some uploads failed. Check output above.${NC}"
    exit 1
fi
